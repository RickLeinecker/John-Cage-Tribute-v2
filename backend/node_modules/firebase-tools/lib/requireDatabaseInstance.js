"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requireDatabaseInstance = exports.MISSING_DEFAULT_INSTANCE_ERROR_MESSAGE = void 0;
const clc = require("cli-color");
const error_1 = require("./error");
const getDefaultDatabaseInstance_1 = require("./getDefaultDatabaseInstance");
exports.MISSING_DEFAULT_INSTANCE_ERROR_MESSAGE = `It looks like you haven't created a Realtime Database instance in this project before. Please run ${clc.bold.underline("firebase init database")} to create your default Realtime Database instance.`;
function requireDatabaseInstance(options) {
    return __awaiter(this, void 0, void 0, function* () {
        if (options.instance) {
            return;
        }
        let instance;
        try {
            instance = yield getDefaultDatabaseInstance_1.getDefaultDatabaseInstance(options);
        }
        catch (err) {
            throw new error_1.FirebaseError(`Failed to get details for project: ${options.project}.`, {
                original: err,
            });
        }
        if (instance === "") {
            throw new error_1.FirebaseError(exports.MISSING_DEFAULT_INSTANCE_ERROR_MESSAGE);
        }
        options.instance = instance;
    });
}
exports.requireDatabaseInstance = requireDatabaseInstance;
