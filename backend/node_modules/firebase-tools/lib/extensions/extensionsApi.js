"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseExtensionVersionName = exports.parseRef = exports.getExtension = exports.unpublishExtension = exports.publishExtensionVersion = exports.registerPublisherProfile = exports.listExtensionVersions = exports.listExtensions = exports.getExtensionVersion = exports.getSource = exports.createSource = exports.updateInstanceFromRegistry = exports.updateInstance = exports.configureInstance = exports.listInstances = exports.getInstance = exports.deleteInstance = exports.createInstanceFromExtensionVersion = exports.createInstanceFromSource = exports.createInstance = exports.ParamType = void 0;
const semver = require("semver");
const yaml = require("js-yaml");
const _ = require("lodash");
const clc = require("cli-color");
const api = require("../api");
const logger = require("../logger");
const operationPoller = require("../operation-poller");
const error_1 = require("../error");
const VERSION = "v1beta";
const PAGE_SIZE_MAX = 100;
const refRegex = new RegExp(/^([^/@\n]+)\/{1}([^/@\n]+)(@{1}([a-z0-9.-]+)|)$/);
var ParamType;
(function (ParamType) {
    ParamType["STRING"] = "STRING";
    ParamType["SELECT"] = "SELECT";
    ParamType["MULTISELECT"] = "MULTISELECT";
})(ParamType = exports.ParamType || (exports.ParamType = {}));
function createInstance(projectId, instanceId, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const createRes = yield api.request("POST", `/${VERSION}/projects/${projectId}/instances/`, {
            auth: true,
            origin: api.extensionsOrigin,
            data: {
                name: `projects/${projectId}/instances/${instanceId}`,
                config: config,
            },
        });
        const pollRes = yield operationPoller.pollOperation({
            apiOrigin: api.extensionsOrigin,
            apiVersion: VERSION,
            operationResourceName: createRes.body.name,
            masterTimeout: 600000,
        });
        return pollRes;
    });
}
exports.createInstance = createInstance;
function createInstanceFromSource(projectId, instanceId, extensionSource, params) {
    return __awaiter(this, void 0, void 0, function* () {
        const config = {
            source: { name: extensionSource.name },
            params,
        };
        return createInstance(projectId, instanceId, config);
    });
}
exports.createInstanceFromSource = createInstanceFromSource;
function createInstanceFromExtensionVersion(projectId, instanceId, extensionVersion, params) {
    return __awaiter(this, void 0, void 0, function* () {
        const { publisherId, extensionId, version } = parseRef(extensionVersion.ref);
        const config = {
            extensionRef: `${publisherId}/${extensionId}`,
            extensionVersion: version || "",
            params,
        };
        return createInstance(projectId, instanceId, config);
    });
}
exports.createInstanceFromExtensionVersion = createInstanceFromExtensionVersion;
function deleteInstance(projectId, instanceId) {
    return __awaiter(this, void 0, void 0, function* () {
        const deleteRes = yield api.request("DELETE", `/${VERSION}/projects/${projectId}/instances/${instanceId}`, {
            auth: true,
            origin: api.extensionsOrigin,
        });
        const pollRes = yield operationPoller.pollOperation({
            apiOrigin: api.extensionsOrigin,
            apiVersion: VERSION,
            operationResourceName: deleteRes.body.name,
            masterTimeout: 600000,
        });
        return pollRes;
    });
}
exports.deleteInstance = deleteInstance;
function getInstance(projectId, instanceId, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const res = yield api.request("GET", `/${VERSION}/projects/${projectId}/instances/${instanceId}`, _.assign({
            auth: true,
            origin: api.extensionsOrigin,
        }, options));
        return res.body;
    });
}
exports.getInstance = getInstance;
function listInstances(projectId) {
    return __awaiter(this, void 0, void 0, function* () {
        const instances = [];
        const getNextPage = (pageToken) => __awaiter(this, void 0, void 0, function* () {
            const res = yield api.request("GET", `/${VERSION}/projects/${projectId}/instances`, {
                auth: true,
                origin: api.extensionsOrigin,
                query: {
                    pageSize: PAGE_SIZE_MAX,
                    pageToken,
                },
            });
            if (Array.isArray(res.body.instances)) {
                instances.push(...res.body.instances);
            }
            if (res.body.nextPageToken) {
                yield getNextPage(res.body.nextPageToken);
            }
        });
        yield getNextPage();
        return instances;
    });
}
exports.listInstances = listInstances;
function configureInstance(projectId, instanceId, params) {
    return __awaiter(this, void 0, void 0, function* () {
        const res = yield patchInstance(projectId, instanceId, "config.params", {
            config: {
                params,
            },
        });
        return res;
    });
}
exports.configureInstance = configureInstance;
function updateInstance(projectId, instanceId, extensionSource, params) {
    return __awaiter(this, void 0, void 0, function* () {
        const body = {
            config: {
                source: { name: extensionSource.name },
            },
        };
        let updateMask = "config.source.name";
        if (params) {
            body.params = params;
            updateMask += ",config.params";
        }
        return yield patchInstance(projectId, instanceId, updateMask, body);
    });
}
exports.updateInstance = updateInstance;
function updateInstanceFromRegistry(projectId, instanceId, extRef, params) {
    return __awaiter(this, void 0, void 0, function* () {
        const { publisherId, extensionId, version } = parseRef(extRef);
        const body = {
            config: {
                extensionRef: `${publisherId}/${extensionId}`,
                extensionVersion: version,
            },
        };
        let updateMask = "config.extension_ref,config.extension_version";
        if (params) {
            body.params = params;
            updateMask += ",config.params";
        }
        return yield patchInstance(projectId, instanceId, updateMask, body);
    });
}
exports.updateInstanceFromRegistry = updateInstanceFromRegistry;
function patchInstance(projectId, instanceId, updateMask, data) {
    return __awaiter(this, void 0, void 0, function* () {
        const updateRes = yield api.request("PATCH", `/${VERSION}/projects/${projectId}/instances/${instanceId}`, {
            auth: true,
            origin: api.extensionsOrigin,
            query: {
                updateMask,
            },
            data,
        });
        const pollRes = yield operationPoller.pollOperation({
            apiOrigin: api.extensionsOrigin,
            apiVersion: VERSION,
            operationResourceName: updateRes.body.name,
            masterTimeout: 600000,
        });
        return pollRes;
    });
}
function populateResourceProperties(source) {
    const spec = source.spec;
    if (spec) {
        spec.resources.forEach((r) => {
            try {
                if (r.propertiesYaml) {
                    r.properties = yaml.safeLoad(r.propertiesYaml);
                }
            }
            catch (err) {
                logger.debug(`[ext] failed to parse resource properties yaml: ${err}`);
            }
        });
    }
}
function createSource(projectId, packageUri, extensionRoot) {
    return __awaiter(this, void 0, void 0, function* () {
        const createRes = yield api.request("POST", `/${VERSION}/projects/${projectId}/sources/`, {
            auth: true,
            origin: api.extensionsOrigin,
            data: {
                packageUri,
                extensionRoot,
            },
        });
        const pollRes = yield operationPoller.pollOperation({
            apiOrigin: api.extensionsOrigin,
            apiVersion: VERSION,
            operationResourceName: createRes.body.name,
            masterTimeout: 600000,
        });
        populateResourceProperties(pollRes);
        return pollRes;
    });
}
exports.createSource = createSource;
function getSource(sourceName) {
    return api
        .request("GET", `/${VERSION}/${sourceName}`, {
        auth: true,
        origin: api.extensionsOrigin,
    })
        .then((res) => {
        populateResourceProperties(res.body);
        return res.body;
    });
}
exports.getSource = getSource;
function getExtensionVersion(ref) {
    return __awaiter(this, void 0, void 0, function* () {
        const { publisherId, extensionId, version } = parseRef(ref);
        if (!version) {
            throw new error_1.FirebaseError(`ExtensionVersion ref "${ref}" must supply a version.`);
        }
        try {
            const res = yield api.request("GET", `/${VERSION}/publishers/${publisherId}/extensions/${extensionId}/versions/${version}`, {
                auth: true,
                origin: api.extensionsOrigin,
            });
            return res.body;
        }
        catch (err) {
            if (err.status === 404) {
                throw new error_1.FirebaseError(`The extension reference '${clc.bold(ref)}' doesn't exist. This could happen for two reasons:\n` +
                    `  -The publisher ID '${clc.bold(publisherId)}' doesn't exist or could be misspelled\n` +
                    `  -The name of the extension version '${clc.bold(`${extensionId}@${version}`)}' doesn't exist or could be misspelled\n` +
                    `Please correct the extension reference and try again.`);
            }
            else if (err instanceof error_1.FirebaseError) {
                throw err;
            }
            throw new error_1.FirebaseError(`Failed to query the extension version '${clc.bold(ref)}': ${err}`);
        }
    });
}
exports.getExtensionVersion = getExtensionVersion;
function listExtensions(publisherId) {
    return __awaiter(this, void 0, void 0, function* () {
        const extensions = [];
        const getNextPage = (pageToken) => __awaiter(this, void 0, void 0, function* () {
            const res = yield api.request("GET", `/${VERSION}/publishers/${publisherId}/extensions`, {
                auth: true,
                origin: api.extensionsOrigin,
                showUnpublished: false,
                query: {
                    pageSize: PAGE_SIZE_MAX,
                    pageToken,
                },
            });
            if (Array.isArray(res.body.extensions)) {
                extensions.push(...res.body.extensions);
            }
            if (res.body.nextPageToken) {
                yield getNextPage(res.body.nextPageToken);
            }
        });
        yield getNextPage();
        return extensions;
    });
}
exports.listExtensions = listExtensions;
function listExtensionVersions(ref) {
    return __awaiter(this, void 0, void 0, function* () {
        const { publisherId, extensionId } = parseRef(ref);
        const extensionVersions = [];
        const getNextPage = (pageToken) => __awaiter(this, void 0, void 0, function* () {
            const res = yield api.request("GET", `/${VERSION}/publishers/${publisherId}/extensions/${extensionId}/versions`, {
                auth: true,
                origin: api.extensionsOrigin,
                query: {
                    pageSize: PAGE_SIZE_MAX,
                    pageToken,
                },
            });
            if (Array.isArray(res.body.extensionVersions)) {
                extensionVersions.push(...res.body.extensionVersions);
            }
            if (res.body.nextPageToken) {
                yield getNextPage(res.body.nextPageToken);
            }
        });
        yield getNextPage();
        return extensionVersions;
    });
}
exports.listExtensionVersions = listExtensionVersions;
function registerPublisherProfile(projectId, publisherId) {
    return __awaiter(this, void 0, void 0, function* () {
        const res = yield api.request("POST", `/${VERSION}/projects/${projectId}/publisherProfile:register`, {
            auth: true,
            origin: api.extensionsOrigin,
            data: { publisherId },
        });
        return res.body;
    });
}
exports.registerPublisherProfile = registerPublisherProfile;
function publishExtensionVersion(ref, packageUri, extensionRoot) {
    return __awaiter(this, void 0, void 0, function* () {
        const { publisherId, extensionId, version } = parseRef(ref);
        if (!version) {
            throw new error_1.FirebaseError(`ExtensionVersion ref "${ref}" must supply a version.`);
        }
        const publishRes = yield api.request("POST", `/${VERSION}/publishers/${publisherId}/extensions/${extensionId}/versions:publish`, {
            auth: true,
            origin: api.extensionsOrigin,
            data: {
                versionId: version,
                packageUri,
                extensionRoot: extensionRoot || "/",
            },
        });
        const pollRes = yield operationPoller.pollOperation({
            apiOrigin: api.extensionsOrigin,
            apiVersion: VERSION,
            operationResourceName: publishRes.body.name,
            masterTimeout: 600000,
        });
        return pollRes;
    });
}
exports.publishExtensionVersion = publishExtensionVersion;
function unpublishExtension(ref) {
    return __awaiter(this, void 0, void 0, function* () {
        const { publisherId, extensionId, version } = parseRef(ref);
        if (version) {
            throw new error_1.FirebaseError(`Extension reference "${ref}" must not contain a version.`);
        }
        const url = `/${VERSION}/publishers/${publisherId}/extensions/${extensionId}:unpublish`;
        try {
            yield api.request("POST", url, {
                auth: true,
                origin: api.extensionsOrigin,
            });
        }
        catch (err) {
            if (err.status === 403) {
                throw new error_1.FirebaseError(`You are not the owner of extension '${clc.bold(ref)}' and don’t have the correct permissions to unpublish this extension.`);
            }
            else if (err instanceof error_1.FirebaseError) {
                throw err;
            }
            throw new error_1.FirebaseError(`Error occurred unpublishing extension '${ref}': ${err}`);
        }
    });
}
exports.unpublishExtension = unpublishExtension;
function getExtension(ref) {
    return __awaiter(this, void 0, void 0, function* () {
        const { publisherId, extensionId } = parseRef(ref);
        try {
            const res = yield api.request("GET", `/${VERSION}/publishers/${publisherId}/extensions/${extensionId}`, {
                auth: true,
                origin: api.extensionsOrigin,
            });
            return res.body;
        }
        catch (err) {
            if (err.status === 404) {
                throw new error_1.FirebaseError(`The extension reference '${clc.bold(ref)}' doesn't exist. This could happen for two reasons:\n` +
                    `  -The publisher ID '${clc.bold(publisherId)}' doesn't exist or could be misspelled\n` +
                    `  -The name of the extension '${clc.bold(extensionId)}' doesn't exist or could be misspelled\n` +
                    `Please correct the extension reference and try again.`);
            }
            else if (err instanceof error_1.FirebaseError) {
                throw err;
            }
            throw new error_1.FirebaseError(`Failed to query the extension '${clc.bold(ref)}': ${err}`);
        }
    });
}
exports.getExtension = getExtension;
function parseRef(ref) {
    const parts = refRegex.exec(ref);
    if (parts && (parts.length == 5 || parts.length == 7)) {
        const publisherId = parts[1];
        const extensionId = parts[2];
        const version = parts[4];
        if (version && !semver.valid(version) && version !== "latest") {
            throw new error_1.FirebaseError(`Extension reference ${ref} contains an invalid version ${version}.`);
        }
        return { publisherId, extensionId, version };
    }
    throw new error_1.FirebaseError("Extension reference must be in format '{publisher}/{extension}(@{version})'.");
}
exports.parseRef = parseRef;
function parseExtensionVersionName(extensionVersionName) {
    const parts = extensionVersionName.split("/");
    if (parts.length !== 6 ||
        parts[0] !== "publishers" ||
        parts[2] !== "extensions" ||
        parts[4] !== "versions") {
        throw new error_1.FirebaseError("Extension version name must be in the format `publishers/<publisherID>/extensions/<extensionID>/versions/<versionID>`.");
    }
    const publisherId = parts[1];
    const extensionId = parts[3];
    const version = parts[5];
    return { publisherId, extensionId, version };
}
exports.parseExtensionVersionName = parseExtensionVersionName;
