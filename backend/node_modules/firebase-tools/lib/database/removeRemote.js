"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RTDBRemoveRemote = void 0;
const apiv2_1 = require("../apiv2");
const url_1 = require("url");
const logger = require("../logger");
const utils = require("../utils");
class RTDBRemoveRemote {
    constructor(instance, host) {
        this.instance = instance;
        this.host = host;
        const url = new url_1.URL(utils.getDatabaseUrl(this.host, this.instance, "/"));
        this.apiClient = new apiv2_1.Client({ urlPrefix: url.origin, auth: true });
    }
    deletePath(path) {
        return this.patch(path, null, "all data");
    }
    deleteSubPath(path, subPaths) {
        const body = {};
        for (const c of subPaths) {
            body[c] = null;
        }
        return this.patch(path, body, `${subPaths.length} subpaths`);
    }
    patch(path, body, note) {
        return __awaiter(this, void 0, void 0, function* () {
            const t0 = Date.now();
            const url = new url_1.URL(utils.getDatabaseUrl(this.host, this.instance, path + ".json"));
            const queryParams = { print: "silent", writeSizeLimit: "tiny" };
            const res = yield this.apiClient.request({
                method: "PATCH",
                path: url.pathname,
                body,
                queryParams,
                responseType: "stream",
                resolveOnHTTPError: true,
            });
            const dt = Date.now() - t0;
            if (res.status >= 400) {
                logger.debug(`[database] Failed to remove ${note} at ${path} time: ${dt}ms, will try recursively chunked deletes.`);
                return false;
            }
            logger.debug(`[database] Sucessfully removed ${note} at ${path} time: ${dt}ms`);
            return true;
        });
    }
}
exports.RTDBRemoveRemote = RTDBRemoveRemote;
